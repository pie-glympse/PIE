generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 BigInt                @id @default(autoincrement())
  email              String                @unique
  password           String
  role               String                @default("STANDARD")
  photoUrl           String                @default("")
  firstName          String                @default("")
  lastName           String                @default("")
  companyId          BigInt?
  company            Company?              @relation(fields: [companyId], references: [id])
  teamId             BigInt?
  team               Team?                 @relation(fields: [teamId], references: [id])
  companyStats       CompanyStats?
  preferences        EventUserPreference[]
  photos             EventsUsersPhoto[]
  feedbacks          Feedback[]
  PasswordResetToken PasswordResetToken[]
  votes              Vote[]
  events             Event[]               @relation("EventUsers")
}

model Company {
  id    BigInt @id @default(autoincrement())
  name  String
  users User[]
  teams Team[]
}

model Team {
  id        BigInt @id @default(autoincrement())
  name      String
  companyId BigInt
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            BigInt                @id @default(autoincrement())
  title         String
  maxPersons    BigInt?
  costPerPerson BigInt?
  state         String                @default("PENDING")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime
  uuid          String                @unique @default(uuid())
  activityType  String?
  city          String?
  endDate       DateTime?
  endTime       DateTime?
  maxDistance   Float?
  startDate     DateTime?
  startTime     DateTime?
  location      EventLocation?
  preferences   EventUserPreference[]
  photos        EventsUsersPhoto[]
  feedbacks     Feedback[]
  votes         Vote[]
  tags          Tag[]                 @relation("EventTags")
  users         User[]                @relation("EventUsers")
}

model Tag {
  id          BigInt                @id
  name        String
  preferences EventUserPreference[]
  events      Event[]               @relation("EventTags")
}

model EventUserPreference {
  userId        BigInt
  eventId       BigInt
  preferredDate DateTime
  tagId         BigInt
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag           Tag      @relation(fields: [tagId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
}

model EventsUsersPhoto {
  id        BigInt  @id @default(autoincrement())
  userId    BigInt
  eventId   BigInt
  photoUrl  String
  caption   String?
  createdAt BigInt
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  userId    BigInt
  eventId   BigInt
  rating    BigInt
  message   String
  createdAt DateTime
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model Vote {
  userId    BigInt
  eventId   BigInt
  total     BigInt
  createdAt DateTime
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model EventLocation {
  eventId BigInt @unique
  id      BigInt @id
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model CompanyStats {
  superAdminId BigInt @id
  totalPersons BigInt
  subscription String
  price        BigInt
  companyName  String
  superAdmin   User   @relation(fields: [superAdminId], references: [id])
}

model PasswordResetToken {
  id        BigInt    @id @default(autoincrement())
  token     String    @unique @db.VarChar(255)
  email     String    @db.VarChar(255)
  userId    BigInt
  expiresAt DateTime  @db.Timestamp(6)
  used      Boolean?  @default(false)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token])
}
